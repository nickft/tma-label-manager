.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TSTAT-HOWTO-HOWTO 1"
.TH TSTAT-HOWTO-HOWTO 1 "2016-05-24" "1.x" "Tstat Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Installation"
.IX Header "Installation"
This document provides basic information
for the installation, configuration and usage 
of Tstat and the Bayesian framework for Skype
traffic identification.  A more general
description of the program as well as other
documentation can be found in the Tstat homepage
<http://tstat.tlc.polito.it>
.SS "Requirements"
.IX Subsection "Requirements"
\fIOperating System\fR
.IX Subsection "Operating System"
.PP
Tstat is tested on \f(CW\*(C`Linux\*(C'\fR systems (currently \f(CW\*(C`Ubuntu\*(C'\fR, \f(CW\*(C`Debian\*(C'\fR, \f(CW\*(C`RedHat\*(C'\fR, 
and \f(CW\*(C`CentOS\*(C'\fR, using \f(CW\*(C`2.x\*(C'\fR and \f(CW\*(C`3.x\*(C'\fR kernels), and on \f(CW\*(C`Mac OS X\*(C'\fR (starting 
from 10.6 \f(CW\*(C`Snow Leopard\*(C'\fR to the current 10.10 \f(CW\*(C`Yosemite\*(C'\fR). 
It includes support for compilation for \f(CW\*(C`Android\*(C'\fR, and has been reported working on 
\&\f(CW\*(C`OpenWRT\*(C'\fR. 
It should work under \f(CW\*(C`FreeBSD\*(C'\fR, \f(CW\*(C`NetBSD\*(C'\fR, and other \f(CW\*(C`unix\-like\*(C'\fR systems, 
(although we don't have any of those platforms for testing purposes). 
If you are able to run Tstat on other OSes, we'll be happy to include them in the list.
.PP
\fISystem Libraries\fR
.IX Subsection "System Libraries"
.PP
Tstat requires, by itself, a few library that should
already be installed on your system, such as 
\&\f(CW\*(C`libpcap\*(C'\fR (available from <http://www.tcpdump.org>) 
and the \s-1DAG\s0 drivers (available from <http://www.endace.com>), 
in case you use such hardware. With these libraries, 
you are ready to capture and process the traffic flowing
in your \s-1LAN\s0.
.PP
Since Tstat might use pthread to improve the performance in case of real time
analysis, your system must support \s-1POSIX\s0 threads as well if you want to
profit of this feature. However, keep in mind that threaded execution 
is only an optional feature, and is necessary only for online traffic
analysis, so that this is not a strict requirement: for this reason,
threading is disabled by default.
.PP
Finally, to use the \s-1RRD\s0 functionalities, you also need to have a working
installation of RRDtool (available from <http://oss.oetiker.ch/rrdtool/>).
.SS "Quick Install"
.IX Subsection "Quick Install"
Assuming that you want version \f(CW\*(C`3.x.y\*(C'\fR:
.PP
.Vb 7
\&         wget http://tstat.polito.it/download/tstat\-3.x.y.tar.gz
\&         tar \-xzvf tstat\-3.x.y.tar.gz
\&         cd tstat\-3.x.y
\&         ./autogen.sh
\&         ./configure [\-\-enable\-libtstat] [\-\-enable\-zlib]
\&         make
\&         make install (with root privileges)
.Ve
.PP
This commands install a executable file named \f(CW\*(C`tstat\*(C'\fR in \f(CW\*(C`/usr/local/bin\*(C'\fR.
.SS "Complete control of Building"
.IX Subsection "Complete control of Building"
The most important elements in the Tstat's package are:
.PP
.Vb 8
\&    tstat/
\&    tstat\-conf/
\&    libtstat/
\&    include/
\&    libtstat\-demo/
\&    doc/ 
\&    doc/HOWTO
\&    README AUTHORS NEWS INSTALL ChangeLog
.Ve
.PP
The \f(CW\*(C`tstat\*(C'\fR directory contains the source code of Tstat which
is also the default building target. Beside Tstat it can also be compiled
the \f(CW\*(C`Libtstat\*(C'\fR, a shared library which allows to an external program to access 
to the traffic analysis functions of Tstat. In the \f(CW\*(C`include\*(C'\fR directory there is the
header file of the library instead in the \f(CW\*(C`libtstat\-demo\*(C'\fR directory there is a simple 
program of example that shows how to use the Libtstat 
(see \*(L"Libtstat library\*(R" for more information about the Libtstat \s-1API\s0).
.PP
The building of the Libtstat library is disabled by default but is provided
a configuration option to control this feature
.PP
.Vb 2
\&    ./configure \-\-enable\-libtstat    # build tstat, libtstat and libtstat\-demo
\&    ./configure                      # build only tstat
.Ve
.PP
It is possible, if \f(CW\*(C`Zlib\*(C'\fR is found on the system, to compile Tstat to support the
direct creation of zlib compressed logs and dump files.
.PP
.Vb 1
\&    ./configure \-\-enable\-zlib        # build tstat with zlib support
.Ve
.PP
At the end of \f(CW\*(C`configure\*(C'\fR is printed a small report:
.PP
.Vb 3
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&      tstat Version 3.0
\&      \-lpcap \-lpthread \-lm  \-lrrd \-lz
\&
\&      Prefix: \*(Aq/usr/local\*(Aq
\&
\&      Package features:
\&        \- pcap      yes
\&        \- zlib      yes
\&        \- rrd       yes
\&        \- libtstat  no
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
This indicate if the libtstat has been selected or not for the building 
and if either \f(CW\*(C`Librrd\*(C'\fR or \f(CW\*(C`Zlib\*(C'\fR were found in the system, 
in which case they are automatically added in building the project.
.PP
Tstat's source code uses some preprocess definition to enable/disable some features,
like for example the \s-1DAG\s0 support which is disabled by default.
These definitions are declared in the \f(CW\*(C`tstat/Makefile.conf\*(C'\fR each with a specific 
description about its purpose so it should be easy change to behaviour in the building
process commenting/uncommenting some lines.
.IP "\(bu" 1
\&\s-1NB:\s0 remember to run \f(CW\*(C`autoreconf\*(C'\fR from the root of the package every time 
a change in these file is performed!!!
.PP
The building of Libtstat is separated from the building of Tstat so \f(CW\*(C`libtstat/Makefile.conf\*(C'\fR
file defines the set of option specific for the Libtstat, while \f(CW\*(C`tstat/Makefile.conf\*(C'\fR
is specific for Tstat.
.PP
In the directory \f(CW\*(C`tstat\-conf\*(C'\fR there are some examples of configuration files 
needed by Tstat; for example the set of local addresses (\-N option), 
the configuration of the histograms (\-H), \s-1RRD\s0 tool (\-R), runtime (\-T) and 
bayesian framework (\-B).
.PP
In the directory \f(CW\*(C`doc\*(C'\fR there are some plain text files that describes the format
of logs files generated by the analysis and in \f(CW\*(C`doc/HOWTO\*(C'\fR there is howto document 
in different file formats.
\&\f(CW\*(C`README\*(C'\fR, \f(CW\*(C`AUTHORS\*(C'\fR, \f(CW\*(C`INSTALL\*(C'\fR, \f(CW\*(C`NEWS\*(C'\fR and \f(CW\*(C`ChangeLog\*(C'\fR instead are plain files that
describes some general information about the package like the authors, the last new
features of the tools, etc...
.SS "Complete control of Installation"
.IX Subsection "Complete control of Installation"
The default \f(CW\*(C`prefix\*(C'\fR for installation is \f(CW\*(C`/usr/local\*(C'\fR so
Tstat executable in installed in \f(CW\*(C`/usr/local/bin\*(C'\fR and Libtstat 
is installed in \f(CW\*(C`/usr/local/lib\*(C'\fR. Anyway a different \f(CW\*(C`prefix\*(C'\fR can
be specified at configuration time
.PP
.Vb 1
\&    ./configure \-\-prefix=/absolute/path/where/install/tstat
.Ve
.PP
Libtstat-demo is only a demonstration tool so is build only a local
executable that is not installed.
.PP
Libtstat is provided with \f(CW\*(C`pkg\-config\*(C'\fR support so a \f(CW\*(C`libtstat.pc\*(C'\fR is installed in
\&\f(CW\*(C`/usr/lib/pkg\-config\*(C'\fR and typing
.PP
.Vb 1
\&    pkg\-config \-\-cflags \-\-libs libtstat
.Ve
.PP
it should appears an output like
.PP
.Vb 1
\&    \-I/usr/local/include  \-L/usr/local/lib \-lm \-lpthread \-lpcap \-lrrd
.Ve
.PP
that indicates the \f(CW\*(C`CFLAGS\*(C'\fR and \f(CW\*(C`LIBS\*(C'\fR options used in the building
process.
.SH "Usage"
.IX Header "Usage"
There are few things to know to run Tstat: first, you are required to have a
knowledge of the network that you want to monitor. 
Second, there are the few options that are described in this section.
.SS "Synopsis"
.IX Subsection "Synopsis"
Tstat primary usage is as a command-line tool; the synopsis of 
the command is the following:
.PP
.Vb 10
\&    Usage:
\&        tstat [\-htuvwpgSL0] [\-d[\-d]]
\&              [\-s dir]
\&              [\-N file]
\&              [\-C file]
\&              [\-Y file]
\&              [\-\-keyvalue key | \-\-keyfile file | \-\-keybase64 file]                                                              
\&              [\-W file]
\&              [\-B bayes.conf]
\&              [\-T runtime.conf]
\&              [\-G globals.conf]                                   
\&              [\-z file]
\&              [\-A mask]
\&              [\-H ?|file ]
\&              [\-6]                                                
\&              [\-F file]                                           
\&              [\-Z] [\-P]
\&              [\-r RRD_out_dir] [\-R rrd_conf]
\&              [\-l] [\-i interface] [\-E snaplen]
\&              [\-f filterfile]
\&              <file1 file2>
\&
\&    Options:
\&        \-h: print this help and exit
\&        \-t: print ticks showing the trace analysis progress
\&        \-u: do not trace UDP packets
\&        \-v: print version and exit
\&        \-w: print [lots] of warning
\&        \-c: concatenate the finput files
\&            (input files should already be in the correct order)
\&        \-0: force the strict(er) privacy mode for logs
\&        \-d: increase debug level (repeat to increase debug level)
\&
\&        \-s dir: puts the trace analysis results into directory
\&                tree dir (otherwise will be <file>.out)
\&        \-N file: specify the file name which contains the
\&                 description of the internal networks.
\&                 This file must contain the subnets that will be
\&                 considered as \*(Aqinternal\*(Aq during the analysis.
\&                 Each subnet can be specified in one of the following types:
\&                 \- <Network IPv4/MaskLen> on a single line                  
\&                     130.192.0.0/16                                         
\&                 \- <Network IPv6/MaskLen> on a single line                  
\&                     2001:db8::/32                                    
\&                 \- <Network IPv4/NetMask IPv4> on a single line             
\&                     130.192.0.0/255.255.0.0                                
\&                 \- Pairs of lines with <Network IPv4> and <NetMask IPv4>    
\&                     130.192.0.0                                            
\&                     255.255.0.0                                            
\&                 If the option is not specified all networks are
\&                 considered internal
\&
\&        \-M file: specify the file name which contains the
\&                 description of the MAC addesses that are to be considered internal.
\&                 MAC addresses must be in the 6 digit \- hex notation.
\&                 Example:
\&                        11:22:33:44:55:66 
\&                        66:55:44:33:22:11 
\&                 If this option is specified, the \-N param is ignored.
\&
\&        \-C file: specify the file name which contains the
\&                 description of the cloud networks.
\&                 This file must contain the subnets that will be
\&                 considered as belonging to a specific group of networks
\&                 (cloud) during the analysis.
\&                 Subnets are specified like in the \-N option.
\&
\&        \-Y file: specify the file name which contains the
\&                 description of the encrypted networks.  
\&                 This file must contain the subnets for which the IPv4 address
\&                 will be anonymized using the Crypto\-PAn algorithm.            
\&                 Subnets are specified like in the \-N option.                 
\&
\&        \-\-keyvalue key: specify a string to be used as the key for address
\&                 anonymization.                                           
\&                 Valid only if the \-Y option is also specified. Only one option
\&                 among \-\-keyvalue, \-\-keyfile, and \-\-keybase64 can be used.     
\&
\&        \-\-keyfile file: specify the file name which contain the plain text key
\&                 for address anonymization.                                   
\&                 Valid only if the \-Y option is also specified. Only one option
\&                 among \-\-keyvalue, \-\-keyfile, and \-\-keybase64 can be used.     
\&
\&        \-\-keybase64 file: specify the file name which contain the Base64 encoded
\&                 key for address anonymization.                                 
\&                 Valid only if the \-Y option is also specified. Only one option 
\&                 among \-\-keyvalue, \-\-keyfile, and \-\-keybase64 can be used.      
\&
\&        \-W file: specify the file name which contains the
\&                 description of the whitelisted hosts/networks.
\&                 This file must contain the subnets for which the IPv4 address
\&                 will be whitelisted and *NOT* anonymized using the Crypto\-PAn algorithm.
\&                 Subnets are specified like in the \-N option.                            
\&                 Meaningful only if the \-Y option is also specified.                     
\&
\&        \-H ?: print internal histograms names and definitions
\&        \-H file: Read histogram configuration from file
\&                 file describes which histograms tstat should collect
\&                 \*(Aqinclude histo_name\*(Aq includes a single histogram
\&                 \*(Aqinclude_matching string\*(Aq includes all histograms
\&                 whose name includes the string
\&                 special names are:
\&                 \*(AqALL\*(Aq to include all histograms
\&                 \*(AqADX\*(Aq to include address hits histogram
\&                 for example, to include all TCP related
\&                 and the address hits histograms, file should be:
\&                 include ADX
\&                 include_matching tcp
\&                 \*(Aqadx_mask N\*(Aq is a special command to define the 
\&                 size of the netmask used to aggregate the address histograms
\&                 (e.g. \*(Aqadx_mask 24\*(Aq to use the 255.255.255.0 mask)  
\&
\&        \-g: Enable global histo engine
\&        \-S: No histo engine: do not create histograms files 
\&        \-L: No log engine: do not create log_* files 
\&        \-1: Use old (v1) log_mm format
\&        \-B Bayes_Dir: enable Bayesian traffic classification
\&                      configuration files from Bayes_Dir
\&        \-T runtime.conf: configuration file to enable/disable dumping
\&                         of traces and logs at runtime
\&        \-G globals.conf: configuration file to provide at startup new values
\&                         to the internal global configuration constants     
\&        \-z file: redirect all the stdout/stderr messages to the file specified
\&        \-A mask: enable XOR\-based anonymization for internal IPv4 addresses.
\&                 \*(Aqmask\*(Aq is a decimal, octal, or hexadecimal value.
\&        \-6: disable the L4 processing of IPv6 datagrams                          
\&        \-X: disable the DN\-Hunter DNS engine 
\&        \-F file: specify the file name which contains the
\&                 list of DNS domains to be included/excluded from the
\&                 TCP traffic dump. Activated in the runtime configuration (\-T)
\&        \-Z: Create gzip compressed (.gz) log files.
\&        \-P: Create gzip compressed (.gz) pcap dump files.
\&        \-R conf: specify the configuration file for integration with
\&                 RRDtool. See README.RRDtool for further information
\&        \-r path: path to use to create/update the RRDtool database
\&        \-l: enable live capture using libpcap
\&        \-i interface: specifies the interface to be used to capture traffic
\&        \-E snaplen: specifies the snaplen size used to capture traffic.
\&                    It might be overridden by the interface slen size
\&        \-f filterfile: specifies the libpcap filter file. Syntax as in tcpdump
\&
\&        file: trace file to be analyzed
\&              Use \*(Aqstdin\*(Aq to read from standard input.
\&
\&    Note:
\&        When tstat is called with no arguments (on the command line),
\&        it will first check if a file <tstat.conf> is provided in the
\&        same directory where the execution started.
\&        In the latter case, arguments will be read from <tstat.conf>
\&        rather than from the command line
\&
\&    Supported Input File Formats:
\&        tcpdump          tcpdump format \-\- Public domain program from LBL
\&        snoop            Sun Snoop format \-\- Distributed with Solaris
\&        etherpeek        etherpeek format \-\- Mac sniffer program
\&        netmetrix        Net Metrix format \-\- Commercial program from HP
\&        ns               ns format \- Network simulator ns2 from LBL
\&        netscout         NetScout Manager format
\&        erf              Endace Extensible Record format
\&        tcpdump live     Live capture using pcap/tcpdump library
.Ve
.SS "Live Capture vs Trace Analysis"
.IX Subsection "Live Capture vs Trace Analysis"
Tstat can sniff and analyze traffic on-line through the
use of either the \f(CW\*(C`libpcap\*(C'\fR library or Endace \s-1DAG\s0 cards. 
The use of Tstat is very easy, especially if you have
experiences with \f(CW\*(C`tcpdump\*(C'\fR, although \f(CW\*(C`tcpdump\*(C'\fR's knowledge
is not required to profitably use Tstat. Moreover, advanced 
users will enjoy the ability of on-line processing of traffic
captured with \s-1DAG\s0 cards.
.PP
As a minimal configuration, you must describe your network to Tstat. Indeed, in
order to distinguish forward and backward paths, Tstat needs to know which host
\&\s-1IP\s0 addresses can be considered as ``internal'' to the monitored network. 
There are four different format to specify the internal subnets and
if, for example, we use Politecnico di Torino subnets, which are \f(CW\*(C`130.192.0.0/16\*(C'\fR and
\&\f(CW\*(C`192.204.134.0/24\*(C'\fR, we can choose to use one of the following formats:
.IP "<Network IPv4/MaskLen> on a single line" 4
.IX Item "<Network IPv4/MaskLen> on a single line"
.Vb 2
\&    130.192.0.0/16
\&    192.204.134.0/16
.Ve
.IP "<Network IPv6/MaskLen> on a single line" 4
.IX Item "<Network IPv6/MaskLen> on a single line"
.Vb 2
\&    2100:abcd:ef00::/40
\&    fe80::/64
.Ve
.IP "<Network IPv4/NetMask IPv4> on a single line" 4
.IX Item "<Network IPv4/NetMask IPv4> on a single line"
.Vb 2
\&    130.192.0.0/255.255.0.0
\&    192.204.134.0/255.255.0.0
.Ve
.IP "(only for backward compatibility) pairs of lines with <Network \s-1IP\s0> and <NetMask IPv4>" 4
.IX Item "(only for backward compatibility) pairs of lines with <Network IP> and <NetMask IPv4>"
.Vb 4
\&    130.192.0.0
\&    255.255.0.0
\&    192.204.134.0
\&    255.255.0.0
.Ve
.PP
Note that formats can be mixed in the configuration file and comment lines
can be specified using \f(CW\*(Aq#\*(Aq\fR so using following
configuration is still correct
.PP
.Vb 5
\&    # this is a comment
\&    130.192.0.0/24
\&    192.204.134.0/255.255.0.0
\&    192.168.0.0
\&    255.255.0.0
.Ve
.PP
IPv6 networks can be always included, but they will be considered only if IPv6 
support has been enabled at compilation time (as reported by \f(CW\*(C`tstat \-v\*(C'\fR).
.PP
In the directory \f(CW\*(C`tstat\-conf\*(C'\fR are placed the two files \f(CW\*(C`net.all\*(C'\fR and
\&\f(CW\*(C`net.private\*(C'\fR
.PP
.Vb 5
\&    >cat tstat\-conf/net.all
\&    # Mask to indicate that all IP subnets are supposed to be internal
\&    # The same result is obtained omitting the \-N option
\&    0.0.0.0/0.0.0.0
\&    ::/0
\&
\&    >cat tstat\-conf/net.private
\&    # Example mask to consider as internal all the subnets in the 
\&    # 198.168. private addresses range
\&    192.168.0.0/16
.Ve
.PP
that can be useful for generic elaborations. In any case, if the \f(CW\*(C`\-N\*(C'\fR option
is not specified all networks are considered internal.
.PP
We can now run Tstat to capture the traffic flowing across 
our network, with the following command, which must be run as \f(CW\*(C`root\*(C'\fR (as you
need to capture packets by putting the Ethernet interface in promiscuous mode).
The simplest command is the following:
.PP
.Vb 1
\&         ./tstat \-l \-N net.conf
.Ve
.PP
Beside live-capture, it is possible to run Tstat on a previously collected 
trace file, where the trace format can be any of the following:
.PP
.Vb 10
\&        Supported Input File Formats:
\&                tcpdump          tcpdump \-\- Public domain program from LBL
\&                snoop            Sun Snoop \-\- Distributed with Solaris
\&                etherpeek        etherpeek \-\- Mac sniffer program
\&                netmetrix        Net Metrix \-\- Commercial program from HP
\&                ns               ns \-\- network simulator from LBL
\&                netscout         NetScout Manager format
\&                erf              Endace Extensible Record Format
\&                DPMI             Distributed Passive Measurement Interface (DPMI) format
\&                tcpdump live     Live capture using pcap/tcpdump library
.Ve
.PP
Tstat will try to read trace files given as input, and to automatically identify
the correct dump format. Trace files can be compressed or uncompressed, and
Tstat will automatically detect the compression tool used (supported formats are
\&\f(CW\*(C`compress, gzip, bzip2, 7z\*(C'\fR).
.PP
Without loss of generality, we assume to use the first of the above formats. The
calling syntax is similar to the previous one, with the exception of the absence
of the live-capture switch \f(CW\*(C`\-l\*(C'\fR and the presence of the name(s) of the file(s)
that have to be processed. For example, the following command can be used to
analyze a trace file named \f(CW\*(C`LAN.dump.gz\*(C'\fR. Results of the analysis
will be stored in a subdirectory named \f(CW\*(C`trace1\*(C'\fR; as before, \f(CW\*(C`net.conf\*(C'\fR contains  the
subnet description that will be considered as ``internal'' during the
analysis.
.PP
.Vb 1
\&         ./tstat \-s trace1 \-N net.conf LAN.dump.gz
.Ve
.SS "More Control"
.IX Subsection "More Control"
We can control the interface that we want to sniff from as well as
the output directory name as follows:
.PP
.Vb 1
\&         ./tstat \-i eth1 \-l \-s test \-Nnet.conf
.Ve
.PP
Moreover, we can also pipe Tstat input using the special keyword
\&\f(CW\*(C`stdin\*(C'\fR as input, as in the following command (piping ns2 output to 
Tstat is left as an exercise for the reader):
.PP
.Vb 1
\&         tcpdump \-s 80 \-i eth0 \-w \- ip | ./tstat \-Nnet.conf \-spiped stdin
.Ve
.PP
In this case, Tstat is fed by \f(CW\*(C`tcpdump\*(C'\fR's output, and the latter has been
instructed to capture packets on the eth0 device, collecting the
first 80 bytes (to track uniquely packet headers) of \s-1IP\s0 packets only, 
and send the output to \f(CW\*(C`stdout\*(C'\fR. Moreover, since Tstat understands 
the \f(CW\*(C`libpcap\*(C'\fR syntax, filters can be stored in text files, as in 
the following command sequence:
.PP
.Vb 2
\&         echo "vlan and ip and host 10.0.0.1" > tcpdump.conf
\&         ./tstat  \-i eth0 \-l \-f tcpdump.conf \-N net.conf \-s filtered
.Ve
.SS "Process Signalling"
.IX Subsection "Process Signalling"
While Tstat runs, it is possible to interact with the program using Unix signals. 
This might be useful if Tstat is executed unsupervised, or without full terminal control 
(redirecting stdout/stderr using the \f(CW\*(C`\-z\*(C'\fR option).
.PP
Currently Tstat reacts to the \f(CW\*(C`USR1\*(C'\fR and \f(CW\*(C`INT\*(C'\fR signals.
.PP
Sending a \f(CW\*(C`USR1\*(C'\fR signal to a running a\*^XXTstata\*^XX process makes it print the current flow 
statistics to standard error and then resume its operations.
.PP
Sending a \f(CW\*(C`INT\*(C'\fR signal to a running a\*^XXTstata\*^XX process makes it gracefully terminate its 
operations, writing all the statistics to the output files, flushing and closing the files, and
printing the overall flow statistics to stderr before exiting. This is equivalent to interrupting
the program pressing \f(CW\*(C`Ctrl\-C\*(C'\fR from the control terminal.
.PP
If Tstat is running unsupervised, you should avoid terminating the process using the \f(CW\*(C`KILL\*(C'\fR signal
( \f(CW\*(Aqsignal \-KILL\*(Aq\fR or \f(CW\*(Aqsignal \-9\*(Aq\fR), since it will possibly leave the log files in an 
inconsistent state, and you should therefore use either the \f(CW\*(C`INT\*(C'\fR or the \f(CW\*(C`TERM\*(C'\fR signals
 (\f(CW\*(Aqsignal \-INT\*(Aq\fR or \f(CW\*(Aqsignal \-TERM\*(Aq\fR).
.SH "Output"
.IX Header "Output"
Tstat collects several network-layer as well as transport-layer measurements,
which are described in full details in <http://tstat.polito.it/measure.shtml>.
As output, Tstat produces four different types of files: histograms, round robin database, 
packet level traces and other plain text logs.
.PP
By default Tstat collect all the output results in a directory with the same name of the input 
trace appending the suffix \f(CW\*(C`.out\*(C'\fR or \f(CW\*(C`stding\*(C'\fR in case of a live capture:
.PP
.Vb 3
\&    ./tstat \-N net.conf trace1.pcap trace2.pcap # output dir: trace1.pcap.out, trace2.pcap.out
\&    ./tstat \-N net.conf \-li eth0                # output dir: generate stdin   
\&    ./tstat \-N net.conf \-s trace1 trace1.pcap   # output dir: trace1
.Ve
.PP
In any case, inside the output directory is generated a subdirectory named with the
timestamp of the first packet analyzed and inside this directory the files generated
are organized as follow:
.PP
.Vb 10
\&    <output_root>
\&    \`\-\- 23_00_28_Jun_2008.out
\&        |\-\- 000
\&        |   \`\-\-\- histo_logs
\&        |\-\- 001
\&        |   \`\-\-\- histo_logs
\&        ...
\&        |\-\- LAST
\&        |   \`\-\-\- histo_logs
\&        |
\&        |\-\- traces00
\&        |   \`\-\-\- dump_traces
\&        |\-\- traces01
\&        |   \`\-\-\- dump_traces
\&        ...
\&        \`\-\- other_logs
.Ve
.PP
This means that the \s-1RRD\s0 output files are not collected inside the output directory, 
in fact there is a specific command line option (\-r) to indicate where this results 
have to be placed.
.PP
Recall that Tstat assumes that traces are collected on a bidirectional link,
such that both data and control packets belonging to the same flow are observed;
with the help of the figures below, we will explain the different classification
of measurements used by Tstat.
.PP
Tstat identifies hosts based on their \s-1IP\s0 address. Given the description
of the internal hosts through the \f(CW\*(C`\-N\*(C'\fR command line option, Tstat
distinguishes among \fIincoming\fR, \fIoutgoing\fR and \fIlocal\fR 
measurements. Packets whose destination is an internal host and whose source is
an external host will contribute to \fIincoming\fR measurements (red arrow in the
top figure), whereas packets going
in the opposite direction will contribute to \fIoutgoing\fR measurements (green
arrow in the top figure). Finally, in
some cases it is possible that Tstat observes packets whose source and
destination host belong to the internal host set: in such cases, measurements
will be classified as \fIlocal\fR (blue arrow in the top figure).
Notice that packets whose source and destination \s-1IP\s0
addresses belong to the external host set will be discarded.
For example, consider a setup in which Tstat is attached to a snoop port of a
\&\s-1LAN\s0 switch. Then Tstat will be fed by i) \fIoutgoing\fR packets going to the default gateway,
ii) \fIincoming\fR packets coming from the default gateway, iii) \fIlocal\fR packets.
.PP
Note that if you either do not know or do not want to distinguish between
internal, external and local hosts, you may enable the \f(CW\*(C`\-DLOG_UNKNOWN\*(C'\fR 
(in \f(CW\*(C`tstat/Makefile.conf\*(C'\fR or \f(CW\*(C`libtstat/Makefile.conf\*(C'\fR)
directive when compiling. Tstat will then be less strict, but results may
be difficult to be correctly interpreted.
.PP
Considering instead the \fIrole\fR of the host that sent the packet, statistic are
collected distinguishing between \fIclients\fR (green arrow in the bottom figure)
and \fIservers\fR (red arrow in the top figure), i.e., host
that opens a connection and and host that replies to connection request. Recall
that while \s-1TCP\s0 connections are well defined, \s-1UDP\s0 (and \s-1RTP/RTCP\s0) connection
definition is more fuzzy. In this latter case, Tstat will consider as client the
source \s-1IP\s0 address of the host that sent the first packet of that flow, while the
server will be the host identified by the destination \s-1IP\s0 address of the same
packet.
.PP
Therefore, when applicable, Tstat will keep track of measurements referring to
the same measured quantity by \fIappending\fR a specific tag (see \*(L"Histograms\*(R") or using a \fIflag\fR 
(see Logs).
.SS "Logs"
.IX Subsection "Logs"
Tstat creates a set of \s-1TXT\s0 flow files in the main output directory: \f(CW\*(C`log_tcp_complete\*(C'\fR,
\&\f(CW\*(C`log_tcp_nocomplete\*(C'\fR, \f(CW\*(C`log_udp_complete\*(C'\fR, \f(CW\*(C`log_mm_complete\*(C'\fR, \f(CW\*(C`log_video_complete\*(C'\fR,
\&\f(CW\*(C`log_skype_complete\*(C'\fR, \f(CW\*(C`log_chat_complete\*(C'\fR and \f(CW\*(C`log_chat_messages\*(C'\fR.
\&\s-1TCP\s0 flows can be either completed or not depending whether Tstat observed the
3\-way handshaking or not; in the first case, all the measured indexes relatively
to each flow will be collected in the \f(CW\*(C`log_tcp_complete\*(C'\fR; in the latter
case,  flows are considered as garbage and stored in \f(CW\*(C`log_tcp_nocomplete\*(C'\fR;
Similarly, a complete log keeping track of each \s-1UDP\s0 flow measured indexes is
maintained in the \f(CW\*(C`log_udp_complete\*(C'\fR file. Being \s-1UDP\s0 basically a
connectionless protocol, it is impossible to distinguish among \f(CW\*(C`complete\*(C'\fR and
\&\f(CW\*(C`nocomplete\*(C'\fR flows in this case.
.PP
Furthermore the following log files are created: \f(CW\*(C`log_video_complete\*(C'\fR and
\&\f(CW\*(C`log_streaming_complete\*(C'\fR for \s-1TCP\s0 video 
streaming flows (i.e. \s-1RTMP\s0 or HTTP-based video services like YouTube), 
\&\f(CW\*(C`log_mm_complete\*(C'\fR for multimedia flows
(i.e. \s-1RTP\s0, \s-1RTCP\s0, etc), \f(CW\*(C`log_chat_complete\*(C'\fR for \s-1IM\s0 protocols (i.e. \s-1MSN\s0, Jabber, etc) and
\&\f(CW\*(C`log_skype_complete\*(C'\fR for Skype traffic.
.PP
Description of the file format of each log file can be found in
<http://tstat.polito.it/measure.shtml>.
.PP
If Tstat has been compiled with Zlib support, it will directly create gzip compressed 
logs (.gz) when the command line option \f(CW\*(C`\-Z\*(C'\fR is used. Internal compression might be 
\&\s-1CPU\s0 demanding: before enabling it, you should consider its possible effects on the Tstat 
performance.
.SS "Histograms"
.IX Subsection "Histograms"
Histograms are generated periodically to generate the \fIdistribution\fR of a 
given quantity within a time interval. Tstat collects all the
measurement data during a given measurement interval defined by the \f(CW\*(C`MAX_TIME_STEP\*(C'\fR 
parameter, which is hard-coded in the \f(CW\*(C`tstat/param.h\*(C'\fR file to 5 minutes. Please, note
that changing the \f(CW\*(C`MAX_TIME_STEP\*(C'\fR parameter may affect \s-1RRD\s0 creation as well.
For example, considering the \s-1IP\s0 packet length, Tstat updates, for
each observed \s-1IP\s0 packet, the counter of the number of observed packets with a
particular length. At the end of the measurement period, Tstat then saves
the values stored in the histogram in a subdirectory named with a incrementally counter
of three digits, resets all the internal values, and then restarts 
the samples collection.
.PP
To separate statistics respecting the verse (input, output or local) and the role of a
peer in the communications, is appended a tag to files generated:
.ie n .IP """_out""" 4
.el .IP "\f(CW_out\fR" 4
.IX Item "_out"
outgoing: from an internal host to an external host
.ie n .IP """_in""" 4
.el .IP "\f(CW_in\fR" 4
.IX Item "_in"
incoming: from an external host to an internal host
.ie n .IP """_loc""" 4
.el .IP "\f(CW_loc\fR" 4
.IX Item "_loc"
local between two internal hosts
.ie n .IP """_c2s""" 4
.el .IP "\f(CW_c2s\fR" 4
.IX Item "_c2s"
going from the Client to the Server
.ie n .IP """_s2c""" 4
.el .IP "\f(CW_s2c\fR" 4
.IX Item "_s2c"
going from the Server to the Client
.PP
Considering the last example of previous section, we run:
.PP
.Vb 1
\&         ./tstat \-s trace1 \-N net.conf 23_00_28_Jun_2008.dump.gz
.Ve
.PP
The output generated by Tstat consists of a directory tree like the following:
.PP
.Vb 10
\&        trace1
\&    \`\-\- 23_00_28_Jun_2008.out
\&        |\-\- 000
\&        |   |\-\- addresses<tag>
\&        |   |\-\- flow_number<tag>
\&        |   |\-\- ip_len_in<tag>
\&        |    ...
\&        |   |\-\- udp_port_flow_dst<tag>
\&        |   \`\-\- udp_tot_time<tag>
\&        |\-\- 001
\&        |   |\-\- addresses<tag>
\&        |   |\-\- flow_number<tag>
\&        |   |\-\- ip_len_in<tag>
\&        |    ...
\&        |   |\-\- udp_port_flow_dst<tag>
\&        |   \`\-\- udp_tot_time<tag>
\&        ...
\&        |\-\- LAST
\&        |   |\-\- addresses<tag>
\&        |   |\-\- flow_number<tag>
\&        |   |\-\- ip_len_in<tag>
\&        |    ...
\&        |   |\-\- udp_port_flow_dst<tag>
\&            \`\-\- udp_tot_time<tag>
.Ve
.PP
Subdirectories with increasing numbers will be created for each measurement
period with the format \f(CW\*(C`nnn/\*(C'\fR; histograms collecting measurement results will
be created in these directories; note that the histograms referring to the last
\&\fIpartial\fR time period will be stored in the \s-1LAST\s0 subdirectory. The option \f(CW\*(C`\-g\*(C'\fR
adds also the subdirectory \s-1GLOBAL\s0 containing the global histograms for the whole
measurement period.
.PP
The \f(CW\*(C`\-H\*(C'\fR has to be used to enable the histogram engine, specifying a configuration
file of \f(CW\*(C`?\*(C'\fR to have a complete list of the available histograms. The syntax of
the configuration file is really simple:
.PP
.Vb 3
\&    include ALL             # add all histograms
\&    include ADX             # histogram to count how many times ip address are used
\&    adx_mask 16             # define the size of the netmask for the ADX histogram
\&
\&    include ip_len_in      # histogram of the ip packet length of the input traffic
\&
\&    include_matching ip_    # match all the histograms which name start with \*(Aqip_\*(Aq
.Ve
.PP
Histogram data are saved using simple \s-1ASCII\s0 files: 
the first line contains a description of the
measured quantity, while the second line contains the parameters of the histograms
(minimum and maximum values, and size of each bins). The list of all
the counter index and values is then dumped. To limit the file size, the
corresponding entry is omitted if the counter is zero.
For example, the histogram of the packet length \f(CW\*(C`ip_len_in\*(C'\fR looks like:
.PP
.Vb 7
\&     #IP packet length \- incoming packets
\&     #min=0 bin_size=4 max=1600
\&     28 7
\&     36 277
\&     40 11760
\&     44 3463
\&     ...
.Ve
.PP
Simple \*(L"Post Processing\*(R" tools are available to automatically manage the histogram
database.
.SS "\s-1RRD\s0"
.IX Subsection "RRD"
The \s-1RRD\s0 output consists of a series of binary files stored in the \s-1RRD\s0 format.
Tstat forces a particular \fInaming notation\fR of such files, which follows
the configuration rules described later in \s-1RRD\s0 section.
.PP
The \s-1RRD\s0 can then be queried with the standard RRDtool commands, such as
\&\f(CW\*(C`rrdcreate\*(C'\fR, \f(CW\*(C` rrdupdate\*(C'\fR,  \f(CW\*(C` rrdgraph\*(C'\fR, \f(CW\*(C` rrddump\*(C'\fR, \f(CW\*(C` rrdfetch\*(C'\fR, 
\&\f(CW\*(C` rrdtune\*(C'\fR, \f(CW\*(C` rrdlast\*(C'\fR, \f(CW\*(C` rrdxport\*(C'\fR, to whose manual pages we refer 
the reader for further informations.
.SS "Packet Level Traces"
.IX Subsection "Packet Level Traces"
Inside Tstat there is a \f(CW\*(C`Deep Packet Inspector \- DPI\*(C'\fR which is able to identify
traffic communications at application level looking the composition of the payload
of packets.
.PP
This feature is controlled by the \*(L"Runtime module\*(R" and the output
files are placed in subdirectories named \f(CW\*(C`tracesNN\*(C'\fR where \f(CW\*(C`NN\*(C'\fR is an counter
incremented every time the runtime configuration is changed.
In any case, for each configuration, the input traffic in 
is splitted in traces with windows of 1 hour, that is, for example,
if we start the dump at 9:00 am
.PP
.Vb 3
\&    traces00/udp_complete.pcap0       #all the udp traffic from 9:00  to 10:00
\&    traces00/udp_complete.pcap1       #all the udp traffic from 10:00 to 11:00
\&    ...
.Ve
.PP
All the traces are in \f(CW\*(C`pcap\*(C'\fR format and, because of the level 2 headers are in
general useless for statistic purpose, each packet dumped is composed of a bogus
Ethernet header (contains only zeros expect for the \f(CW\*(C`type\*(C'\fR field which is \s-1IP\s0)
followed by the original packet starting from \s-1IP\s0 header. The input packets
can also be truncated after a specific amount of bytes which can be configured
using the \f(CW\*(C`snap_len\*(C'\fR specific option in the configuration file.
.PP
If Tstat has been compiled with Zlib support, it will directly create gzip compressed 
traces (.pcap.gz) when the command line option \f(CW\*(C`\-P\*(C'\fR is used. Internal compression 
of the packet traces is highly \s-1CPU\s0 demanding: before enabling it, you should consider 
its possible effects on the Tstat performance.
.SS "Privacy concerns"
.IX Subsection "Privacy concerns"
To cope with privacy concerns and possible legal requirements, Tstat has a few options
to mitigate the user information exposed in the log files.
.PP
One main privacy concern is the presence of the actual user \s-1IP\s0 addresses in logs.
To hide this information, Tstat implements two possible solutions.
.PP
The first one is a simple XOR-based obfuscation of the IPv4 address, activated by the 
command line option \f(CW\*(C`\-A mask\*(C'\fR. The 32\-bit mask is applied \fBonly\fR to internal IPv4 
addresses, as defined by either the \f(CW\*(C`\-N\*(C'\fR or the \f(CW\*(C`\-M\*(C'\fR command line options. If no 
internal network is defined, all IPs are considered internal and they are all 
obfuscated, reducing the usefulness of the logs to identify well known services.
The XOR-based obfuscation is applied as soon as the \s-1IP\s0 datagram is parsed, so
any saved packet level trace will contain the obfuscated \s-1IP\s0 addresses.
.PP
The second solution is a complex cryptographical anonymization of the \s-1IP\s0 addresses,
based on the well known Crypto\-PAn[*] algorithm.
Crypto-PAn is a prefix-preserving \s-1IP\s0 anonymizer, and it is activated providing a 
list of \s-1IP\s0 networks to be anonymized using the command line option \f(CW\*(C`\-Y\*(C'\fR. 
The networks are indicated in a format similar to the one used for the \f(CW\*(C`\-N\*(C'\fR and \f(CW\*(C`\-C\*(C'\fR
command line options. Any \s-1IP\s0 address matching one of those networks is marked for 
encryption. Since the anonymization operations are CPU-intensive, any \s-1IP\s0 address 
is anonymized only once, the translation cached, and it is actually used only when the 
\&\s-1IP\s0 address must be printed in the logs. 
Since the original \s-1IP\s0 address is still used internally by Tstat and the translation is 
only used when printing the logs, any saved packet level trace will contain the 
\&\fBoriginal non encrypted\fR \s-1IP\s0 addresses.
It is possible indicate a list of \s-1IP\s0 addresses and networks to be excluded from the 
encryption process using the \f(CW\*(C`\-W\*(C'\fR command line option with a file in the same format 
used for the \f(CW\*(C`\-N\*(C'\fR option. Addresses satisfying both the \f(CW\*(C`\-Y\*(C'\fR and the \f(CW\*(C`\-W\*(C'\fR lists 
will be whitelisted and will appear \fBunencrypted\fR in the log files.
.PP
The encrytion key used by the Crypto-PAn algorithm can be provided either directly on 
the command line, using the \f(CW\*(C`\-\-keyvalue\*(C'\fR option, or from a file, using 
either the \f(CW\*(C`\-\-keyfile\*(C'\fR or the \f(CW\*(C`\-\-keybase64\*(C'\fR options. The \f(CW\*(C`\-\-keyfile\*(C'\fR option
can be used for a plain text \s-1ASCII\s0 key, while the \f(CW\*(C`\-\-keybase64\*(C'\fR option will treat 
content as a Base64 encoded key, so its suitable for an encoded binary key. In any case
the key is supposed to be 32 bytes long: longer keys are truncated to 32 bytes, and 
shorter keys are padded with zeros. If no key is provided, a key is generated reading 
32 random bytes read from \f(CW\*(C`/dev/random\*(C'\fR, so it will change every time Tstat starts.
Due to the blocking nature of \f(CW\*(C`/dev/random\*(C'\fR, it might take some time for Tstat to
start if there is not enough entropy on the system random generator.
.PP
The key used in each Tstat session is always saved in Base64 format in a file named 
\&\fICPanKey_<datetime\fR>  (where \fIdatetime\fR is the current time of the day) that is 
created in the log directory root (the one indicated by the \f(CW\*(C`\-s\*(C'\fR command line option).
The generated file is suitable to be later used as the argument of the \f(CW\*(C`\-\-keybase64\*(C'\fR 
option.
.PP
For the sake of simplicity IPv6 addresses are currently anonymized as 4 IPv4 addresses 
(after some masking to hide trivial bit patterns): this should maintain the 
prefix-preserving property and should be sufficient to provide the required privacy.
IPv6 addresses are currently not obfuscated (\f(CW\*(C`\-A\*(C'\fR).
There is currently no support in Tstat for obfuscation of \s-1TCP/UDP\s0 port numbers, 
since it is of limited usage in a traffic analysis tool such as Tstat.
Obfuscated (\f(CW\*(C`\-A\*(C'\fR) addresses are not explicitely indicated in the log files (if they are
internal, and obfuscation was active, they are actually obfuscated). The presence of 
anonymized (\f(CW\*(C`\-Y\*(C'\fR) address is explicitely indicated in the log files in the \f(CW\*(C`c_iscrypto\*(C'\fR
and \f(CW\*(C`s_iscrypto\*(C'\fR columns.
The \f(CW\*(C`\-A\*(C'\fR and \f(CW\*(C`\-Y\*(C'\fR options are not mutually exclusive, so it is possible to obfuscate the
internal addresses and, at the same time, anonymize another, possible overlapping, set of
\&\s-1IP\s0 addresses.
.PP
Beside the privacy issues related to the \s-1IP\s0 addresses, logs contain information that 
might be considered sensitive, i.e. the URLs information in \f(CW\*(C`log_http_complete\*(C'\fR and 
the YouTube VideoIDs in \f(CW\*(C`log_video_complete\*(C'\fR. The command line option \f(CW\*(C`\-0\*(C'\fR make Tstat 
run in privacy mode: in this mode, the runtime.conf option \f(CW\*(C`httplog_full_url\*(C'\fR is forced 
to 0, so that full URLs cannot be logged in \f(CW\*(C`log_http_complete\*(C'\fR, and the YouTube 
Video IDs in \f(CW\*(C`log_video_complete\*(C'\fR are masked as \f(CW\*(AqXXX\*(Aq\fR.
.PP
[*] <http://www.cc.gatech.edu/computing/Telecomm/projects/cryptopan/>
.SS "Post Processing"
.IX Subsection "Post Processing"
This section could be a separate \s-1HOWTO\s0, since this
argument cannot be treated exhaustively. Perl, Awk, Ruby
\&\fIYour-Favorite-Scripting-Language\fR scripts are definitively
best candidates to post-process \f(CW\*(C`log_*\*(C'\fR files.
.PP
In the Tstat download page and in the source archive, you
can find \f(CW\*(C`plot_time.pl\*(C'\fR and \f(CW\*(C`plot_cum.pl\*(C'\fR, two Perl scripts that may be useful
to produce either i) time or ii) aggregated plots over different time spans.
They directly access the histogram database created by Tstat.
Please, refer to <http://tstat.polito.it/software.php#postprocess>.
.PP
In the source code, in \f(CW\*(C`scripts/MySQL/\*(C'\fR, you can also find a few Perl 
scripts to load the main \f(CW\*(C`log_*\*(C'\fR files in a simple MySQL database, for further 
post-processing.
.PP
\&\s-1RRD\s0 files can be manipulated to obtain \fIindirect\fR 
metrics through the \s-1RPN\s0 manipulations mechanism provided 
by RRDtool.
.SS "Storage Considerations"
.IX Subsection "Storage Considerations"
To give the user a rough idea of the size of the output,
let us consider a 6 hours long, 1.6GB packet-level trace containing 
21M packets, sniffed with \f(CW\*(C`tcpdump\*(C'\fR that was used throughout this tutorial.
Tstat identified and analyzed about 729K flows, of which about 495K were 
\&\s-1TCP\s0 flows, trashing 20K of them into \f(CW\*(C`log_nocomplete\*(C'\fR.
Referring to the output  above shown,
we can express the following observations:
.IP "Histogram" 4
.IX Item "Histogram"
As previously described, in order to take into account the flow directions,
several histograms are dumped for the same variable \f(CW\*(C`var_{in,out,loc,c2s,s2c}\*(C'\fR.
Currently, about 60 measurement indexes, described in 
<http://tstat.tlc.polito.it/measure.shtml>,  are logged, for a total
of 180 files. Each of the \f(CW\*(C`000/\*(C'\fR, \f(CW\*(C`001/\*(C'\fR ... \f(CW\*(C`LAST/\*(C'\fR directories is about
500KB\-1MB depending on the network traffic and on the file system block
allocation mechanism.
.Sp
Therefore,  as a rule of thumb, you can count about 1MB of storage due to
histograms every 5 minutes of traffic (independently of the amount of actual
traffic load during the 5 mins...). This can be useful in order to set the
periodic dump timer to the desired trade off among time granularity versus
storage size  required.
.IP "\s-1RRD\s0" 4
.IX Item "RRD"
The \f(CW\*(C`rrd/\*(C'\fR directory is, per construction, of fixed size: this should not be a
surprise, since this is the goal of \s-1RRD\s0. Therefore, the size of the database
does not depend on the amount of network traffic processed, but rather on the
\&\s-1RRD\s0 configuration. For the standard configuration supplied with Tstat, which is
also the one used in our Web server, the whole database occupy only 6MB and
consists of about 250 files.
.IP "Logs" 4
.IX Item "Logs"
The total size of the log files amount to about 200MB, which 
gives  a 8x reduction factor w.r.t. the packet-level trace; or,
the storage cost of each flow is about 400 bytes.
.Sp
Note that the \f(CW\*(C`log_*\*(C'\fR can be further compressed, using the \f(CW\*(C`\-Z\*(C'\fR Tstat
command line option or \f(CW\*(C`gzip\*(C'\fR to less than 50MB, which gives a further 
4x size gain; however, for a matter of performance, is preferable 
to compress the log files \fIoffline\fR.
.PP
Finally, consider that on a common \s-1PC\s0 architecture (specifically,
Intel P4 2.40GHz equipped with 2GB of \s-1RAM\s0 and 7200rpm hard-disk),
the whole trace elaboration took only 4 minutes; thus, the 
analysis rate is roughly 85Kpkts/sec or 3Kflows/sec.
.SH "RRD Module"
.IX Header "RRD Module"
.SS "RRDtool Installation"
.IX Subsection "RRDtool Installation"
In order to get Tstat \s-1RRD\s0 module working, you will need to install RRDtool first
(refer to the homepage of RRDtool <http://oss.oetiker.ch/rrdtool/>  to accomplish this step).
The autoconf file \f(CW\*(C`configure\*(C'\fR of Tstat then should automatically add the \s-1RRD\s0 support 
if it find one (see Complete control of building ).
.SS "\s-1RRD\s0 Configuration"
.IX Subsection "RRD Configuration"
Tstat \s-1RRD\s0 configuration is very easy, being centralized
in a single text-file, which allows to specify at runtime what measurements
should be monitored. The operating frequencies
for the \s-1RRD\s0 sampling (i.e., the parameters for the temporal 
averages) are hard-coded into \f(CW\*(C`rrdtool.h\*(C'\fR and are chosen to 
mimic \s-1MRTG\s0 behavior. Again, take care that modifying the \f(CW\*(C`MAX_TIME_STEP\*(C'\fR
parameter may affect the \s-1RRD\s0 management as well.
.PP
The \s-1RRD\s0 configuration file, specified through the command line option \f(CW\*(C`\-R\*(C'\fR,
should contain one line for each of the Tstat parameters that have
to be integrated into a Round Robin Database. Each line allows to
specify which statistical properties of the variable has to be tracked,
as follows:
.PP
.Vb 1
\&          tstat_var1 avg min max stdev var idx:e,f,g,h,other prc:i,j,k
.Ve
.PP
where \f(CW\*(C`avg,min,max,stdev,var,idx,prc,other\*(C'\fR are keywords, whereas \f(CW\*(C`i,j,k\*(C'\fR 
are floating point numbers and \f(CW\*(C`e,f,g,h\*(C'\fR integer values; note that
the list of indexes (e.g., \s-1TCP\s0 ports), values (e.g., packet size)
and percentiles are comma separated. The name of the variables are
Tstat internal ones: they can be seen by executing \f(CW\*(C`./tstat \-H\*(C'\fR,
Alternatively, you can directly look into the \f(CW\*(C`000/\*(C'\fR ...  \f(CW\*(C`LAST/\*(C'\fR  directories or
or at <http://tstat.polito.it/measure.shtml>
.PP
Valid configuration lines are, e.g.:
.PP
.Vb 4
\&          #
\&          # inspect IP packet length average, specific values and distribution
\&          #
\&          ip_len_in   avg prc:50,90,95,99 idx:40,1500,other
\&
\&          #
\&          # TCP well known ports       
\&          #                       
\&          # 20    FTP\-DATA             
\&          # 21    FTP                  
\&          # 22    SSH                  
\&          # 23    telnet               
\&          # 25    SMTP                 
\&          # 80    HTTP                 
\&          # ...                        
\&          #
\&          tcp_port_dst_in       idx:20,21,22,23,25,80,other          
\&
\&          #
\&          # good approximation of the distribution of the RTT,
\&          # taking into account only the incoming path contribution
\&          #
\&          tcp_rtt_avg_in  prc:0.1,1,5,10,25,50,75,90,95,99,99.9
.Ve
.PP
where, evidently, the lines starting with a \f(CW\*(C`#\*(C'\fR sign are treated as comments.
Our Web server is currently running with the configuration
available at <http://tstat.polito.it/download/rrd.conf>.
.PP
For each specified quantity defined in the rrd.conf file, a corresponding file
will be created.
For example, consider that the generic configuration line:
.PP
.Vb 1
\&          tstat_var avg min max stdev var idx:e,f,g,h,other prc:i,j,k
.Ve
.PP
will produce the following files (13 in total):
.PP
.Vb 3
\&          tstat_var.{avg,min,max,stdev,var}.rrd
\&          tstat_var.idx{e,f,g,h,oth}.rrd
\&          tstat_var.prc{i,j,k}.rrd
.Ve
.SS "Tstat \s-1RRD\s0 and the Web"
.IX Subsection "Tstat RRD and the Web"
From the Tstat web site, you can
download the most up-to-date version of \f(CW\*(C`tstat_rrd.cgi\*(C'\fR,
which is the \s-1CGI\s0 script that renders the Web interface.
Here is some basic tips to get it working; if you wonder
how to write your own graph templates, then you are probably
skilled enough to get it on your own \f(CW\*(C`:)\*(C'\fR
.PP
\fIDatabase Structure\fR
.IX Subsection "Database Structure"
.PP
The \s-1CGI\s0 scripts allow to browse on the fly the \s-1RRD\s0 database structure.
The \f(CW\*(C`rrd_data\*(C'\fR directory is the root of the tree, where each
directory contains either i) other directories (i.e., is a box) 
or ii) a RRD-database, in which case the node is a leaf and will be
shown in the interface. In case that a directory is a plain box, it may
optionally contain some files (specifically 
{\f(CW\*(C`HEADER\*(C'\fR,\f(CW\*(C`FOOTER\*(C'\fR,\f(CW\*(C`README\*(C'\fR}.{\f(CW\*(C`html\*(C'\fR,\f(CW\*(C`txt\*(C'\fR})
that will be rendered by \f(CW\*(C`tstat_rrd.cgi\*(C'\fR. 
By default, the cgi script tries to load the html version;
otherwise, it tries to displays \*(L"<pre> `cat FILE` </pre>\*(R"
if such a \s-1FILE\s0 exists; finally, it will display a default message
held in \f(CW$default\fR{\s-1README\s0} hard coded in the script.
.PP
Here is an example of the rrd_data directory which holds part of the \s-1RRD\s0 database
accessible from the Tstat web page.
.PP
.Vb 10
\&        rrd_data/
\&         |\-\- Example
\&         |\-\- GARR
\&         |   |\-\- garr\-live
\&         |   \`\-\- garr\-old
\&         \`\-\- Polito
\&             |\-\- 2000
\&             |   |\-\- Apr
\&             |   |\-\- Jun
\&             |   |\-\- Jun,post155
\&             |   \`\-\- May
\&             |\-\- 2001
\&             |   |\-\- Feb
\&             |   \`\-\- Jan
\&             |\-\- 2005
\&             |   |\-\- Apr
\&             |   \`\-\- Feb
\&             \`\-\- Current
.Ve
.PP
\fIWeb Configuration\fR
.IX Subsection "Web Configuration"
.PP
The web configuration really depends on your web server configuration. Few
dependencies are required, most notably, the \s-1RRD\s0 Perl library from the RRDtool
installation.
.PP
It is advisable to store the Tstat \s-1RRD\s0 files
everywhere you want, and then create a symbolic link 
named \f(CW\*(C`rrd_data\*(C'\fR that points to it (i.e., to the root of 
the \s-1RRD\s0 database tree). Similarly for the directory
where the rendered images should be stored (defaults to \f(CW\*(C`cgi\-bin/rrd_images\*(C'\fR)
and can be a symbolic link as well.
The names of these symbolic links can be redefined in the 
configuration section of \f(CW\*(C`tstat_rrd.cgi\*(C'\fR if needed:
.PP
.Vb 9
\&        #   _\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_
\&        #  /                            \e
\&        # /    configuration  _\|_\|_\|_\|_\|_\|_\|_\|_\|_/
\&        # \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_/.:nonsns:.
\&        #
\&        # specify path to the root of the rrd database tree
\&        # by default, I assume there is a symbolic link in cgi\-bin/
\&        # named rrd_data
\&        $RRD_DATA = \*(Aqrrd_data\*(Aq;
\&
\&        # same thing for image directory
\&        # in my case, var/www/cgi\-bin/rrd_images is
\&        # a symbolic link to "/var/www/html/rrd_images";
\&        # from the html browser\*(Aqs perspective
\&        $IMG_DIR = "rrd_images";
.Ve
.SH "Runtime Module"
.IX Header "Runtime Module"
This module has been developed with the specific target to try to control the disk
occupation and to have a minimal interface
to execution process to enable/disable some feature without restarting it. 
In particular, the system controls two specific outputs: the writing of log files and packet level traces, so
is possible to disable the writing of logs (histograms, \s-1RRD\s0 and all the others) if they
became to bigs, and to dynamically change the set of packet level traces to collect.
.PP
The module works with simple polling system that is it periodically tests if a configuration file,
specified with the \f(CW\*(C`\-T\*(C'\fR option when Tstat is executed, is changed from the previous check
and in this case, the new configuration replace the previous one.
The polling process is controlled by the global constants \f(CW\*(C`Runtime_Config_Idle\*(C'\fR and 
\&\f(CW\*(C`Runtime_Mtime_Counter\*(C'\fR, that can be overriden at startup with the \f(CW\*(C`\-G\*(C'\fR option, as described
in the \*(L"Global Constants\*(R" section.
.PP
The configuration file has an \f(CW\*(C`ini\*(C'\fR file syntax:
.PP
.Vb 10
\&    > cat tstat\-conf/runtime.conf
\&    # print logs on disk
\&    [log]
\&    histo_engine = 0    # logs created by histogram engine
\&    rrd_engine = 0      # logs created by rrd engine
\&    log_tcp_complete = 0            # tcp connections correctly terminated
\&    log_tcp_nocomplete = 0          # tcp connections not properly terminated
\&    log_udp_complete = 0            # udp flows
\&    log_mm_complete = 0             # multimedia 
\&    log_skype_complete = 0          # skype traffic
\&    log_chat_complete = 0           # MSN/Yahoo/Jabber chat flows
\&    log_chat_messages = 0           # MSN/Yahoo/Jabber chat messages
\&    log_video_complete = 0          # video (YouTube and others)
\&    log_http_complete = 0           # all the HTTP requests/responses
\&
\&    # log options
\&    [options]
\&    tcplog_end_to_end = 0       # End_to_End set of measures (RTT, TTL)
\&    tcplog_layer7 = 0           # Layer7 set of measures (TLS cert., message counts)
\&    tcplog_p2p = 0              # P2P set of measures (P2P subtype and ED2K data)
\&    tcplog_options = 0          # TCP Options set of measures
\&    tcplog_advanced = 0         # Advanced set of measures
\&    httplog_full_url = 0        # Partial (=1) or full (=2) URLs in log_http_complete
\&
\&    videolog_end_to_end = 0     # TCP End_to_End set of measures (RTT, TTL)
\&    videolog_layer7 = 0         # Layer7 set of measures (TLS cert., message counts)
\&    videolog_videoinfo = 0      # Additional video info (resolution, bitrate)
\&    videolog_youtube = 0        # YouTube specific information
\&    videolog_options = 0        # TCP Options set of measures
\&    videolog_advanced = 0       # Video\-related Advanced mesurements (rate)
\&
\&    # protocols to dump
\&    [dump]
\&    snap_len = 0        # max num of bytes to dump from ip hdr (included)
\&                        # 0 == all bytes
\&    slice_win = 0       # dimension (in secs) of the dumping window
\&                        # used to slice the input traffic in different traces
\&                        # 0 == no slicing
\&
\&    udp_dns = 0
\&    udp_rtp = 0
\&    udp_rtcp = 0
\&    udp_edk = 0
\&    udp_kad = 0
\&    udp_kadu = 0        # KadU network
\&    udp_okad = 0        # obfuscated kad
\&    udp_gnutella = 0
\&    udp_bittorrent = 0
\&    udp_dc = 0
\&    udp_kazaa = 0
\&    udp_pplive = 0
\&    udp_sopcast = 0
\&    udp_tvants = 0
\&    udp_ppstream = 0
\&    udp_teredo = 0
\&    udp_vod = 0
\&    udp_sip = 0
\&    udp_dtls = 0
\&    udp_quic = 0
\&    udp_unknown = 0    # all the udp traffic that the DPI doesn\*(Aqt recognize
\&
\&    tcp_videostreaming = 0 
\&
\&    ip_complete = 0    # all the ip traffic (not consider L4 type and if it\*(Aqs used)
\&    udp_complete = 0   # all the udp traffic
\&    tcp_complete = 0   # all the tcp traffic
\&
\&    udp_maxpackets = 0
\&    udp_maxbytes = 0
\&    tcp_maxpackets = 0
\&    tcp_maxbytes = 0
\&
\&    dns_filter = 0     # enable the dns filtering
\&    
\&    stop_dumping_mask = 0  # bitmask to control the dumping of tcp packets
\&                           # based on flow classification
.Ve
.PP
The file in composed of the three sections \f(CW\*(C`log\*(C'\fR, \f(CW\*(C`options\*(C'\fR, and \f(CW\*(C`dump\*(C'\fR which indicate which
type of log and dump trace to create, and additional information on the log content.
Except for a few exceptions, all features are on/off type i.e. 1 and 0 values are used to 
enable/disable them. One exception is \f(CW\*(C`snap_len\*(C'\fR, used to indicate the maximum number of bytes
dump from the input packet starting from \s-1IP\s0 level included. For example, supposing
to have a simple \s-1IP\s0 + \s-1UDP\s0 packet, using \f(CW\*(C`snap_len\*(C'\fR = 40 it will be written a
packet of 54 bytes
.PP
.Vb 1
\&    14 (bogus ethernet) + 20 (IP) + 8 (UDP) + 12 (payload)
.Ve
.PP
For \s-1UDP\s0 traffic it can be specified a set of applications so to have a specific
dump trace for each application of interest. The unknown traffic i.e. the traffic
that the Tstat's \s-1DPI\s0 is not able to identify, is placed in a separated trace.
For example, using the following configuration
.PP
.Vb 4
\&    udp_rtp = 1
\&    udp_edk = 1
\&    udp_bittorrent = 1
\&    udp_unknown = 1
.Ve
.PP
it's expected to have 4 traces i.e. three protocols/applications (\s-1RTP\s0, eMule, Bittorrent)
and the unknown (for example \s-1DNS\s0 traffic).
.PP
Classified \s-1TCP\s0 complete flows cannot be \*(L"safely\*(R" dumped, since classification
happens after the 3\-way handshaking finished, so saved flows would be
incomplete. 
\&\f(CW\*(C`tcp_videostreaming\*(C'\fR is an exception, used to dump \s-1TCP\s0 flows that were classified
as video through the Streaming \s-1DPI\s0 engine (the ones logged in
\&\f(CW\*(C`log_video_complete\*(C'\fR), even if the 3\-way handshaking and the first flow payload
packets would be skipped. This could be activated if you're interested in performing
a secondary analysis on characteristics of the video stream.
.PP
Beside the traces at application level, it's possible to create three type of aggregated
traces. In particular, \f(CW\*(C`udp_complete\*(C'\fR is all the \s-1UDP\s0 traffic (both applications specific and unknown),
\&\f(CW\*(C`tcp_complete\*(C'\fR is all the \s-1TCP\s0 traffic, while
\&\f(CW\*(C`ip_complete\*(C'\fR refers to all the traffic that use \s-1IP\s0 as level 3 without considering the level 4. 
In other words, \f(CW\*(C`ip_complete\*(C'\fR is the aggregation of \s-1TCP\s0, \s-1UDP\s0 and all the other network protocols that use directly \s-1IP\s0
(\s-1ICMP\s0, \s-1IPIP\s0, \s-1ESP\s0, ...). The three options are \s-1NOT\s0 to complementary so
it's possible to enable all of them contemporary but this obviously means that a \s-1TCP/UDP\s0 packet
it will appear in more than one trace so particular attention should be taken.
.PP
When dumping all \s-1TCP\s0 (\f(CW\*(C`tcp_complete\*(C'\fR) or \s-1UDP\s0 (\f(CW\*(C`udp_complete\*(C'\fR) traffic, 
it is possible to limit the dumping of each
flow to either a maximum number of packets or a maximum number of bytes trasferred.
For example, to save just the first 30000 bytes or the first 30 segments of
each \s-1TCP\s0 flow (whichever condition if reached first), you can use
.PP
.Vb 4
\&    snap_len = 0
\&    tcp_complete = 1
\&    tcp_maxpackets = 30
\&    tcp_maxbytes = 30000
.Ve
.PP
\&\f(CW\*(C`udp_maxpackets\*(C'\fR and \f(CW\*(C`udp_maxbytes\*(C'\fR provide the same functionality for \s-1UDP\s0 flows.
If both \f(CW\*(C`xxx_maxpackets\*(C'\fR and \f(CW\*(C`xxx_maxbytes\*(C'\fR are set to 0, the complete \s-1TCP/UDP\s0 
flows will be saved, with no size limitation.
.PP
\&\f(CW\*(C`dns_filter\*(C'\fR enables the filter based on \s-1DNS\s0 names requested by clients.
You can see the tstat\-conf/DNS_filter_example.txt file for more details.
A filename must be provided with the \f(CW\*(C`\-F\*(C'\fR command line option, and its content cannot 
be changed at runtime.
.PP
\&\f(CW\*(C`stop_dumping_mask\*(C'\fR is a bitmask that is used to stop dumping tcp packets of flows we
are not interested to.
It is a bitmask based on protocol.h types that the con_type can take.
Setting this to 0 will keep logging everything. Setting a bit to 1 will stop logging
packets of those protocol as soon as the classifier set those flags (e.g., setting it to
1025 (1+1024), all http and smtp traffic will be discarded). As for other parameters, the
value can be set either as a decimal number, or as an hexadecimal number (prefixing it
with 0x).
Note that we cannot discard those packets of a flow that we have seen before
actually identifying the protocol. For example, three-way-handshake segments will be
always there.
Examples:
.PP
.Vb 6
\&     stop_dumping_mask = 262143  # => 11 1111 1111 1111 1111 discard everything 
\&                                 #                           we know except UNKNOWN
\&     stop_dumping_mask = 262142  # => 11 1111 1111 1111 1110 log only UNKNOWN and HTTP
\&     stop_dumping_mask = 0x3DFFF # => 11 1101 1111 1111 1111 log only UNKNOWN and SSL/TLS
\&     stop_dumping_mask = 1       # => 00 0000 0000 0000 0001 log everything which is not HTTP
\&     stop_dumping_mask = 0       # => log everything
.Ve
.PP
During the runtime execution of Tstat, the configuration file is controlled periodically
looking for changes in the options. In this way, when Tstat is used for online monitoring, 
is possible to interact with the dumping module without the need to restart the program. 
When a change is identified a new \f(CW\*(C`tracesNN\*(C'\fR output directory is created
in the root output directory to collect all the new traces 
and is also generated a file called \f(CW\*(C`log.txt\*(C'\fR that indicate the dump configuration 
used for that particular dump.
Since the parameters in the \f(CW\*(C`options\*(C'\fR section control the output format of the log files,
when a change is sensed to any of them, the old log files are closed, and a new output directory
is created.
.SH "Global Constants"
.IX Header "Global Constants"
The dimensions of the internal data structures and some key operational parameters are defined 
in Tstat at compilation time (in source file \f(CW\*(C`param.h\*(C'\fR). 
To allow some flexibility in Tstat deployment on live probes, like tailoring the capture process
to the actual traffic, the default internal values can be overriden,
providing new values at startup using the \f(CW\*(C`\-G\*(C'\fR command line option and a \f(CW\*(C`ini\*(C'\fR file.
.PP
The \f(CW\*(C`ini\*(C'\fR file dedicated to the global constants is identified by the \f(CW\*(C`[globals]\*(C'\fR header, 
valid only in \f(CW\*(C`\-G\*(C'\fR context and that cannot appear in the runtime configuration Tstat \f(CW\*(C`ini\*(C'\fR 
file (\f(CW\*(C`\-T\*(C'\fR).
.PP
A complete commented example of \f(CW\*(C`ini\*(C'\fR is provided in the Tstat source distribution as the file 
\&\f(CW\*(C`tstat\-conf/globals.conf\*(C'\fR. We report here a simplified list of the available parameters.
.PP
.Vb 6
\&    > cat tstat\-conf/globals.conf
\&    [globals]
\&    # Important for the system dimensioning
\&    max_tcp_pairs = 180000      # Max number of tracked TCP flows
\&    max_udp_pairs = 360000      # Max number of tracked UDP flows
\&    hash_table_size = 2000003   # Size of the TCP/UDP flow hashes
\&
\&    # Important for the system performances
\&    tcp_idle_time = 300.0       # Timeout to close regular TCP flows [seconds]
\&    udp_idle_time = 200.0       # Timeout to close regular UDP flows [seconds]
\&    tcp_singleton_time = 10.0   # Timeout to close singleton TCP flows [seconds] 
\&    udp_singleton_time = 10.0   # Timeout to close singleton UDP flows [seconds]
\&    gc_cycle_time = 5.0         # Duration of the Garbage Collection cycle [seconds]
\&    gc_split_ratio = 10000      # Number of partitions of the Garbage Collection cycle
\&
\&    # Change only if the default values are too small
\&    max_adx_slots      = 70001  # Size of the hash for IP address hit counter
\&    max_internal_hosts = 100    # Max number of internal networks (\-N)
\&    max_cloud_hosts    = 100    # Max number of \*(Aqcloud\*(Aq networks (\-C)
\&    max_crypto_hosts   = 40     # Max number of encrypted networks (\-Y)
\&    max_white_hosts    = 100    # Max number of whitelisted networks (\-W)
\&    max_internal_ethers = 20    # Max number of Ethernet addresses for internal traffic (\-M)
\&    max_crypto_cache_size = 130000      # Size of the LRU cache used in address encryption
\&    dns_cache_size = 100000     # Size of the IPv4 DNS cache used by the DNhunter module 
\&    dns_cache_size_ipv6 = 1000  # Size of the IPv6 DNS cache used by the DNhunter module 
\&
\&    # Change to tailor the logging activity
\&    runtime_config_idle = 21.0  # Check interval for runtime.conf file (\-T) 
\&    runtime_mtime_counter = 3   # Check cycles for runtime.conf (\-T)
\&    max_time_step = 300.0       # Interval for histogram/RRD collection [seconds]
\&    dirs = 12                   # Number of Max_Time_Step intervals for each log directory
\&    rate_sampling = 1.0         # Interval for TCP flow rate measures [seconds]
\&
\&    # Very specific, change at your risk
\&    max_seg_per_quad = 100      # Max number of segments in flow recostructions
\&    list_search_dept = 200      # Lenght of the linear search for TCP/UDP flows
\&    entropy_sample    = 60      # Number of bytes per packet used for encryption detection
\&    entropy_threshold = 3.7     # Entropy threshold used for encryption detection
\&    min_delta_t_tcp_dup_pkt = 2000.0    # Interarrival time for TCP DUP detection [microseconds]
\&    min_delta_t_udp_dup_pkt = 1000.0    # Interarrival time for UDP DUP detection [microseconds]
.Ve
.PP
Parameter names are case-insensitive. Values in the \f(CW\*(C`[globals]\*(C'\fR section can have integer or 
floating point value. Types are loosely enforced, i.e. integer values can be provided to floating point parameters,
but not the opposite. A warning or an error message is generated when the value or the type of
a parameter is not correct or cannot be safely converted to the right type.
.SH "DPMI Module"
.IX Header "DPMI Module"
To the experienced \s-1DPMI\s0 user, it can turn very useful to
think of Tstat in terms of a \s-1DPMI\s0 consumer, thus suitable
for live usage. Basically, two configuration files need to 
be provided in this case.
.SS "Tstat Configuration for \s-1DPMI\s0"
.IX Subsection "Tstat Configuration for DPMI"
Especially for this purpose,  Tstat can be executed without any argument
on the command line, provided that a file named \f(CW\*(C`tstat.conf\*(C'\fR 
exists in the same path where the \f(CW\*(C`tstat\*(C'\fR command has been
executed. Note that the filename \s-1MUST\s0 be in this case \f(CW\*(C`tstat.conf\*(C'\fR
.PP
In the latter case, arguments will be read from 
\&\f(CW\*(C`tstat.conf\*(C'\fR rather than from the command line, which makes
Web-based execution easier \*(-- it just requires the creation of
a text file.
.PP
Typically, the content of the file will be one of the two following
cases. When only the \s-1RRD\s0 module need to be turned on, which is 
specially suitable for the persistent monitoring of a network link:
.PP
.Vb 1
\&          \-D dpmi.conf \-S \-R rrd.conf \-r data.rrd
.Ve
.PP
Or, in the case where more detailed transport layer logs and histograms 
are to be generated, such as for shorter ad-hoc experiment:
.PP
.Vb 1
\&          \-D dpmi.conf \-s data
.Ve
.PP
Note that the \f(CW\*(C`dpmi.conf\*(C'\fR filename, which is the object of the next 
section, is customizable.
.SS "\s-1DPMI\s0 Configuration for Tstat"
.IX Subsection "DPMI Configuration for Tstat"
This file is used by Tstat in order to properly set-up the 
\&\s-1DPMI\s0 library and, possibly, its filters. There are only two
keywords that are interpreted by Tstat, and \fIthe whole\fR 
content of this file is passed to the \s-1DPMI\s0's \f(CW\*(C`createfiler\*(C'\fR
library call.
Tstat-keywords are prepended by the \f(CW\*(C`tstat:\*(C'\fR prefix, to 
solve any ambiguity, and are related to the type of stream
and measurement direction.
More specifically,
.ie n .IP """tstat:(file|(tcp|udp|eth)[:port])""" 4
.el .IP "\f(CWtstat:(file|(tcp|udp|eth)[:port])\fR" 4
.IX Item "tstat:(file|(tcp|udp|eth)[:port])"
Specify whether a tracefile or a network socket (and in this case, which port)
is the source of \s-1DPMI\s0 traffic. Note that in the case where a tracefile
is used, there is no real need to specify this, since the format recognition
happens automatically; thus, the \f(CW\*(C`tstat:file\*(C'\fR keyword is provided for completeness.
Conversely, options such as \f(CW\*(C`tstat:eth\*(C'\fR and \f(CW\*(C`tstat:tcp:32449\*(C'\fR are
necessary in order for network sockets to properly be setup.
.ie n .IP """tstat:MP:CI""" 4
.el .IP "\f(CWtstat:MP:CI\fR" 4
.IX Item "tstat:MP:CI"
This option is used to define the traffic directionality, specifying 
what network card interface (\s-1CI\s0) and the measurement point (\s-1MP\s0) 
are related to \fIincoming\fR traffic from external sources.
Referring to the \s-1DPMI\s0 library internals:
.Sp
.Vb 2
\&      CI <\-> char nic[8];     
\&      MP <\-> char mampid[8];
.Ve
.PP
In order to provide a safe fallback or a missing configuration,
unless otherwise specified, the first received frame is assumed to 
be ``incoming'', thus arbitrarily determining the incoming \s-1CI:MP\s0 
couple.
.SH "Bayesian Classification of Skype Traffic"
.IX Header "Bayesian Classification of Skype Traffic"
The Bayesian framework is configured through a directory (\f(CW\*(C`\-B\*(C'\fR command line option)
containing several configuration files. A example of configuration
is provided under the \f(CW\*(C`tstat\-conf\*(C'\fR directory so please refer to this directory
reading this explanation. In the configuration directory 
two files have to be placed, named \f(CW\*(C`pktsize.conf\*(C'\fR and \f(CW\*(C`avgipg.conf\*(C'\fR which define
the parameters used by the classification framework to describe the
\&\fBpacket size\fR and \fBaverage inter-packet gap\fR.
.PP
Both files have the same format specified in the example below:
.PP
.Vb 10
\&       #   _\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_  
\&       #  /                   \e 
\&       # /    BayesConf      _\|_\|_\|_\|_\|_\|_\|_\|_\|_/ 
\&       # \e_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_\|_/.:nonsns:.  
\&       #                   
\&       #===============================================
\&       # feature name
\&       #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&       # Known Skype features:
\&       #       PKTSIZE 
\&       #       AVGIPG
\&       #
\&       FEATURE    AVGIPG
\&       #
\&       #===============================================
\&       # default flags 
\&       #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&       # USE_LOG        1
\&       # NORMALIZE      1
\&       # AUTO_OTHER     0
\&       #
\&       WINDOW_SIZE      1
\&       CLASS_LEN        250
\&       MIN_THRESHOLD    1e\-25
\&       AVG_THRESHOLD   \-3.5
\&       WIN_THRESHOLD   \-3
\&       #
\&       #===============================================
\&       # class definition
\&       #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&       # syntax
\&       #     DISCRETE  class P{class}
\&       #     GAUSSIAN  class P{class} mu sigma
\&       #     GAUSSIAN+ class P{class} N (w1,m1,s1) .. (wN,mN,sN)
\&       #
\&       # note: P{class} may be "="
\&       #
\&       GAUSSIAN mode1 = 10 2
\&       GAUSSIAN mode2 = 20 2
\&       GAUSSIAN mode3 = 30 2
\&       GAUSSIAN mode4 = 40 2
\&       GAUSSIAN mode5 = 50 2
\&       GAUSSIAN mode6 = 60 2
.Ve
.PP
The keyword \f(CW\*(C`FEATURE\*(C'\fR is used to specify which type of statistic the configuration
file is refered to. In the example above we are dealing with the average inter-packet gap,
and specifying \f(CW\*(C`PKTSIZE\*(C'\fR we will describe packet size feature.
.PP
Each feature then has a set of flags and other options values that can be 
used to change the configuration of the \s-1NBC\s0 engine. Default parameter are strongly suggested, but in case
you want to experiment with different combinations, you can try to change them.
.ie n .IP """USE_LOG"":" 4
.el .IP "\f(CWUSE_LOG\fR:" 4
.IX Item "USE_LOG:"
If set to 1, the function \fIlog10()\fR is applied to the probability values 
instead to use the actual probability value; this avoids eventual underflow errors when dealing 
with very low probabilities.
.ie n .IP """NORMALIZE"":" 4
.el .IP "\f(CWNORMALIZE\fR:" 4
.IX Item "NORMALIZE:"
If set to 1, the beliefs computed are re-normalized in the range 0:1;
this option is valid only if \s-1USE_LOG\s0 is disabled (by default is enabled);
.ie n .IP """WINDOW_SIZE"":" 4
.el .IP "\f(CWWINDOW_SIZE\fR:" 4
.IX Item "WINDOW_SIZE:"
The number of packets after which recompute beliefs (by default after each packet);
.ie n .IP """CLASS_LEN"":" 4
.el .IP "\f(CWCLASS_LEN\fR:" 4
.IX Item "CLASS_LEN:"
The maximum value assumed by the feature and is used to compute class probability
distribution functions (by default is 0);
.ie n .IP """MIN_THRESHOLD"":" 4
.el .IP "\f(CWMIN_THRESHOLD\fR:" 4
.IX Item "MIN_THRESHOLD:"
A positive small value that replace the value 0 in the computation of beliefs
to avoid underflows because of logarithm function (by default 1e\-33);
.ie n .IP """AVG_THRESHOLD"":" 4
.el .IP "\f(CWAVG_THRESHOLD\fR:" 4
.IX Item "AVG_THRESHOLD:"
The static threshold used to compare the maximum computed belief and take the classification.
.ie n .IP """WIN_THRESHOLD"":" 4
.el .IP "\f(CWWIN_THRESHOLD\fR:" 4
.IX Item "WIN_THRESHOLD:"
A static threshold is used to count the number of individual samples (rather than
their mean) that passes a more restrictive test (indeed the window threshold
is greater than the average threshold).
.PP
Important configuration parameters are the ``modes'' which must be carefully defined. Modes are 
the set of p.d.f. that describe the expected distribution of the feature.
.PP
Modes may be described as a \f(CW\*(C`DISCRETE\*(C'\fR function, that is a generic distributions, 
or as a \f(CW\*(C`GAUSSIAN\*(C'\fR function, that is a gaussian (or a superposition of a gaussian) distribution.
.PP
Each mode then is associated with a name and a probability which is used as a weight.
If \f(CW\*(Aq=\*(Aq\fR is used instead of a weight specific values, all weight are assumed to be uniform.
.PP
The special type \f(CW\*(C`GAUSSIAN+\*(C'\fR may be used to define a mode composed of \f(CW\*(C`N\*(C'\fR 
different gaussian distributions. Each function is defined by mean and standard deviaton sigma
and the weight of the mixture have to be specified.
.PP
Assuming that you have configured both average ipg and packet size feature 
in a directory named \f(CW\*(C`bayes_conf_dir\*(C'\fR the classification engine can be 
enabled simply specifying the \f(CW\*(C`\-B\*(C'\fR command line option:
.PP
.Vb 2
\&    # using live capture mode
\&        ./tstat \-l \-B <bayes_conf_dir> \-N net.conf
\&
\&    # using a packet dump trace
\&        ./tstat \-B <bayes_conf_dir> \-N net.conf tracefile.dump
.Ve
.SH "Libtstat library"
.IX Header "Libtstat library"
Libtstat is a shared library that can be used by external programs to access to
the statistics and classification features provided by Tstat. 
As described in the Install section of this document, to enable the building of
Libtstat library is needed to provide a configure option
.PP
.Vb 1
\&    ./configure \-\-enable\-libtstat
.Ve
.SS "Link the Libtstat library"
.IX Subsection "Link the Libtstat library"
When the library is installed in the system using \f(CW\*(C`make install\*(C'\fR the
following messages are printed on the console
.PP
.Vb 3
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    Libraries have been installed in:
\&    /usr/local/lib
\&
\&    If you ever happen to want to link against installed libraries
\&    in a given directory, LIBDIR, you must either use libtool, and
\&    specify the full pathname of the library, or use the \`\-LLIBDIR\*(Aq
\&    flag during linking and do at least one of the following:
\&    \- add LIBDIR to the \`LD_LIBRARY_PATH\*(Aq environment variable
\&      during execution
\&    \- add LIBDIR to the \`LD_RUN_PATH\*(Aq environment variable
\&      during linking
\&    \- use the \`\-Wl,\-\-rpath \-Wl,LIBDIR\*(Aq linker flag
\&    \- have your system administrator add LIBDIR to \`/etc/ld.so.conf\*(Aq
\&
\&    See any operating system documentation about shared libraries for
\&    more information, such as the ld(1) and ld.so(8) manual pages.
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
This indicate where the library has been installed and how to
link that to some program. The most simple thing to do, is to 
use the native libtool support for automake, that is, assuming
that \f(CW\*(C`program_name\*(C'\fR is the name of the executable of the tool
to generate, it is needed to add the following lines to \f(CW\*(C`Makefile.am\*(C'\fR
of the tool:
.PP
.Vb 2
\&    program_name_LDADD = \-ltstat \-lpcap \-lpthread \-lm
\&    program_name_LDFLAGS = \-Wl,\-\-rpath \-Wl,<libtstat_dir>
.Ve
.PP
This allow a fined control on the directory where the library 
has been installed. Anyway, if it has been installed in a
standard library location (as \f(CW\*(C`/usr/lib\*(C'\fR), instead of the previous
lines, it can be added
.PP
.Vb 1
\&    AC_CHECK_LIB([tstat], [tstat_next_pckt],, AC_MSG_ERROR([missing \*(Aqtstat\*(Aq library]))
.Ve
.PP
in \f(CW\*(C`configure.ac\*(C'\fR of the current project. This automatically
look for the presence of a function \fItstat_next_pckt()\fR in a system library
named \f(CW\*(C`libtstat\*(C'\fR. In case of error of error print a message stopping the
configuration process, instead in case of success, are automatically added
all the linking options needed to build the program (see the autotools 
files in \f(CW\*(C`libtstat\-demo\*(C'\fR for a complete example).
.SS "Libtstat \s-1API\s0"
.IX Subsection "Libtstat API"
Tstat's elaborations are perfomed starting from the level 3 (\s-1IP\s0) so
its is input is a simple array of bytes that contains a packet
starting from level 3. This means is the external program that
has to open a trace or read a packet from a network card and to
parse all the level 2 headers just to have a pointer to the \s-1IP\s0 header.
From this point of view, it can be said that Tstat is simply a wrapper
around Libtstat that add only the support to parse a set of level 2
headers.
.IP "int tstat_init (char *config_fname)" 1
.IX Item "int tstat_init (char *config_fname)"
\&\f(CW\*(C`config_fname\*(C'\fR is a file name containing a set of Tstat options, one 
for each line
.Sp
.Vb 5
\&    >cat tstat\-conf/tstat.conf
\&    #\-s outdir      # output directory
\&    \-N net.all      # network config file 
\&    #\-B bayesdir    # directory of the bayes config files
\&    #\-d             # debug
.Ve
.Sp
If \s-1NULL\s0 is provided, the library use \f(CW\*(C`./tstat.conf\*(C'\fR as filename.
.IP "void tstat_new_logdir (char *filename, struct timeval *pckt_time)" 1
.IX Item "void tstat_new_logdir (char *filename, struct timeval *pckt_time)"
This function has to be called before the process of the first packet
and allow to generate the output directory using this hierarchy:
.Sp
.Vb 2
\&    <filename>.out
\&        |_\|_<pckt_time>.out
.Ve
.IP "int tstat_next_pckt (struct timeval *pckt_time, void *ip_hdr, void *last_ip_byte, int tlen, ip_direction)" 1
.IX Item "int tstat_next_pckt (struct timeval *pckt_time, void *ip_hdr, void *last_ip_byte, int tlen, ip_direction)"
This function enable the processing of a new packet.
\&\f(CW\*(C`pckt_time\*(C'\fR  is the timestamp of the packet, \f(CW\*(C`ip_hdr\*(C'\fR is a pointer to the first ip byte,
\&\f(CW\*(C`last_ip_byte\*(C'\fR is a pointer to the last ip byte, and \f(CW\*(C`tlen\*(C'\fR is the number of total bytes (captured).
Instead \f(CW\*(C`ip_direction\*(C'\fR indicates if the packet is incoming or outgoing. Possible values :
.RS 1
.IP "\(bu" 2
0: use the address based classification provided by the \-N option
.IP "\(bu" 2
1: packet is treated as having internal source and internal destination (local packet)
.IP "\(bu" 2
2: packet is treated as having internal source and external destination (outgoing packet)
.IP "\(bu" 2
3: packet is treated as having external source and internal destination (incoming packet)
.IP "\(bu" 2
4: packet is treated as having external source and external destination (external packet, will be ignored)
.RE
.RS 1
.RE
.IP "tstat_report *tstat_close (tstat_report *report)" 1
.IX Item "tstat_report *tstat_close (tstat_report *report)"
This function flush to file all the pending statistics
and fill a tstat_report structure with some general
results.
.IP "void tstat_print_report (tstat_report *report, \s-1FILE\s0 *file)" 1
.IX Item "void tstat_print_report (tstat_report *report, FILE *file)"
This function print a formatted report to file
using tstat_report data.
.SH "Author Informations"
.IX Header "Author Informations"
.IP "Active authors:" 4
.IX Item "Active authors:"
.Vb 2
\&    Maurizio Munafo\*(Aq    <maurizio.munafo@polito.it>
\&    Alessandro Finamore <alessandro.finamore@telefonica.com>
.Ve
.IP "Other active authors:" 4
.IX Item "Other active authors:"
.Vb 3
\&    Marco Mellia <marco.mellia@polito.it>
\&    Dario Rossi  <dario.rossi@telecom\-paristech.fr> 
\&    Martino Trevisan <martino.trevisan@studenti.polito.it>
.Ve
.IP "Other authors:" 4
.IX Item "Other authors:"
.Vb 2
\&    Andrea Carpani, Luca Muscariello, Dario Bonfiglio, Robert Birke, 
\&    Vinicius Gehlen, Ignacio Bermudez
.Ve
.IP "Other links:" 4
.IX Item "Other links:"
.Vb 3
\&    Telecommunication Networks Group (TNG)
\&    DET, Politecnico di Torino
\&    http://www.tlc\-networks.polito.it
.Ve
.SH "Acknowledgment"
.IX Header "Acknowledgment"
Many people contributed to the development of Tstat. Tstat would never have seen
the light had not \f(CW\*(C`TCPTrace\*(C'\fR being invented.
Many thanks to Shawn Ostermann and to the  Ohio
University for their great program.
.PP
Many Master and PhD students took part in the development and debugging of
Tstat. Naming all of them would be impossible. We would then like to thank Luca
Muscariello for the entropy generated in the \s-1TCP\s0
anomalies identification, and Prof. Marco Ajmone Marsan and 
Prof. Fabio Neri who gave us the moral and scientific support to 
continue investing in Tstat.
.SH "License"
.IX Header "License"
Copyright (c) 2001\-2015 Politecnico di Torino.  All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
